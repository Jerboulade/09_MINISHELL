echo "hello" wor'ld' | grep ho'w "are "y ou"
hello |hello| hel"lo" hell'o ' hello' ' 'hello'>>'hello ' "hel'"lo '"          he'llo" (-->all token should contain hello -->work differently in bash since quote is open)
echo hello hello hel"lo" hell'o ' hello' ' 'hello' 'hello ' "hel'"lo                                        '"     hello"' (same --> work in bash)
echo hello> hello>>hel"lo"|hell'o ' <hello' ' 'hello' 'hel<<<|>>>lo ' "hel'"lo '"     hello" (parsing should retrieve all token)
> file echo hello> hello>>hel"lo"|hell'o ' <hello' ' 'hello' 'hel<<<|>>>lo ' "hel'"lo '"     hello"| (parsing should retrieve all token)

echo hello> hello>>hel"lo"|hell'o ' <>hello' ' 'hello' 'hel<<<|>>>lo ' "hel'"lo '"     hello" (parsing should detect error near '<')
echo hello> hello>>hel"lo"||hell'o ' <>hello' ' 'hello' 'hel<<<|>>>lo ' "hel'"lo '"     hello" (parsing should detect error near '|')

--------------------------------------------------------------
bash-3.2$ | ls
bash: syntax error near unexpected token `|'
--------------------------------------------------------------
bash-3.2$ cat hello >
bash: syntax error near unexpected token `newline'
--------------------------------------------------------------
bash-3.2$ cat hello >>
bash: syntax error near unexpected token `newline'
--------------------------------------------------------------
bash-3.2$ cat hello<
bash: syntax error near unexpected token `newline'
--------------------------------------------------------------
bash-3.2$ cat hello<<
bash: syntax error near unexpected token `newline'
--------------------------------------------------------------
bash-3.2$ cat hello<>
bash: syntax error near unexpected token `newline'
--------------------------------------------------------------
bash-3.2$ cat hello|
> 
bash-3.2$ ls . >
bash: syntax error near unexpected token `newline'
--------------------------------------------------------------
bash-3.2$ > cat hello
bash: hello: command not found
--------------------------------------------------------------
bash-3.2$ < cat hello
bash: hello: command not found
--------------------------------------------------------------
bash-3.2$ < cat
bash-3.2$ | cat
bash: syntax error near unexpected token `|'
--------------------------------------------------------------
bash-3.2$ | echo coucou
bash: syntax error near unexpected token `|'
--------------------------------------------------------------
bash-3.2$ | echo grep coucou
bash: syntax error near unexpected token `|'
--------------------------------------------------------------
bash-3.2$ > echo coucou
bash: coucou: command not found
--------------------------------------------------------------
bash-3.2$ < echo coucou
bash: coucou: command not found
--------------------------------------------------------------
bash-3.2$ < echo
bash-3.2$ < echo echo
bash-3.2$ < echo grep
usage: grep [-abcDEFGHhIiJLlmnOoqRSsUVvwxZ] [-A num] [-B num] [-C[num]]
	[-e pattern] [-f file] [--binary-files=value] [--color=when]
	[--context[=num]] [--directories=action] [--label] [--line-buffered]
	[--null] [pattern] [file ...]
bash-3.2$ < echo grep coucou
--------------------------------------------------------------

--------------------------------ALL PREVIOUS TEST WERE OK AT A TIME 
BUT NEED TO BE RE-CHECK AFTER DEALING NEXT BEHAVIOUR CHECK -----------------------------------

Pipelines
Un pipeline est une séquence d'une ou plusieurs commandes séparées par le caractère |. Le format d'un pipeline est :

[time [-p]] [ ! ] commande_1 [ | commande_2 ... ]
La sortie standard de la commande_1 est connectée, via un tuyau (Ndt : pipe) à l'entrée standard de la commande_2. Cette connexion est établie avant toute redirection indiquée dans une commande elle-même (voir le paragraphe REDIRECTION plus bas).

Le code de retour d'un pipeline est le code de sortie de la dernière commande, à moins que l'option pipefail ne soit active. Si cette option est active, le code de retour du pipeline est la valeur de la dernière commande (la plus à droite) à sortir avec un code non nul, ou zéro si toutes les commandes s'achèvent avec succès. Si le mot réservé ! précède un pipeline, le code de sortie de celui-ci sera la négation logique du code de retour tel qu'on l'a décrit précédemment. L'interpréteur attend la fin de toutes les commandes du pipeline avant de renvoyer une valeur.

Si le mot réservé time précède le pipeline, les temps passés par le programme en mode utilisateur et système sont indiqués quand le pipeline se termine. L'option -p modifie le format de sortie pour celui spécifié par POSIX. La variable TIMEFORMAT peut être affectée avec une chaîne de format indiquant comment les informations horaires doivent être affichées ; consultez la description de TIMEFORMAT dans Variables du Shell plus bas.

Chaque commande du pipeline est exécutée comme un processus indépendant (c'est-à-dire dans un sous-shell).  
--------------------------------------------------------------


// Here next, we can assume that redirection token are append just before a pipe.
// Also, all file are created even if test, test2 or test3 are replaced with an error path like a directory (..)
// WEIRD BEHAVIOUR:
// When redirection before pipe, nothing is redirect after pipe if there is another redirection
// Or, pipe read from wrong fd if redirection before pipe
1--------------------------------------------------------------
bash-3.2$ echo "coucou\nsalut" > test | grep s
bash-3.2$ cat test
coucou\nsalut
--------------------------------------------------------------
bash-3.2$ echo "coucou\nsalut" > test | grep z
bash-3.2$ cat test
coucou\nsalut
2--------------------------------------------------------------
bash-3.2$ echo "coucou\nsalut" | grep s > test
bash-3.2$ cat test
coucou\nsalut
--------------------------------------------------------------
bash-3.2$ echo "coucou\nsalut" | grep z > test
bash-3.2$ cat test
bash-3.2$ 
3--------------------------------------------------------------
bash-3.2$ echo "coucou\nsalut" > test2 | grep s > test
bash-3.2$ cat test
bash-3.2$ cat test2
coucou\nsalut
--------------------------------------------------------------
bash-3.2$ echo "coucou\nsalut" > test2 | grep z > test
bash-3.2$ cat test
bash-3.2$ cat test2
coucou\nsalut
4--------------------------------------------------------------
bash-3.2$ > test2 echo "coucou\nsalut" | grep s > test
bash-3.2$ cat test
bash-3.2$ cat test2
coucou\nsalut
--------------------------------------------------------------
bash-3.2$ > test2 echo "coucou\nsalut" | grep z > test
bash-3.2$ cat test
bash-3.2$ cat test2
coucou\nsalut
5--------------------------------------------------------------
bash-3.2$ echo "coucou\nsalut" > test2 >test3 | grep s > test
bash-3.2$ cat test
bash-3.2$ cat test2
bash-3.2$ cat test3
coucou\nsalut
--------------------------------------------------------------
bash-3.2$ echo "coucou\nsalut" > test2 >test3 | grep z > test
bash-3.2$ cat test
bash-3.2$ cat test2
bash-3.2$ cat test3
coucou\nsalut
6--------------------------------------------------------------
bash-3.2$ > test2 echo "coucou\nsalut" >test3 | grep s > test
bash-3.2$ cat test
bash-3.2$ cat test2
bash-3.2$ cat test3
coucou\nsalut
--------------------------------------------------------------
bash-3.2$ > test2 echo "coucou\nsalut" >test3 | grep z > test
bash-3.2$ cat test
bash-3.2$ cat test2
bash-3.2$ cat test3
coucou\nsalut
7------------------------------------------------
bash-3.2$ echo "coucou\nsalut" >test3 | grep s > test > test2
bash-3.2$ cat test
bash-3.2$ cat test2
bash-3.2$ cat test3
coucou\nsalut
------------------------------------------------
bash-3.2$ echo "coucou\nsalut" >test3 | grep z > test > test2
bash-3.2$ cat test
bash-3.2$ cat test2
bash-3.2$ cat test3
coucou\nsalut
------------------------------------------------
// OTHER WEIRD BEHAVIOUR
------------------------------------------------
bash-3.2$ cat << c | grep s
> salut
> c
salut                                         OK
------------------------------------------------
bash-3.2$ echo test > test
bash-3.2$ echo salut > test2
bash-3.2$ cat test test2 | grep s
test
salut                                         OK
------------------------------------------------
bash-3.2$ cat test << c | grep s
> salut
> c
test                                       WHAT?
------------------------------------------------



MINISHELL COMMAND THAT NEED TO BE FIX
-------------------------------------
echo coucou > test1 | << EOF cat |    #blocked into heredoc
